buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.0.RELEASE")
    }
}

plugins {
    id 'java-library'
}

apply plugin: 'org.springframework.boot'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

configurations {
    dev
}

ext['javax-validation.version'] = '2.0.1.Final'
dependencies {
    compile(
        'ch.qos.logback:logback-classic:1.2.3'
        ,'org.slf4j:jul-to-slf4j:1.7.25'
        ,'org.apache.commons:commons-lang3:3.7'
        ,'commons-io:commons-io:2.6'
        ,'org.apache.commons:commons-text:1.2'
        ,'com.google.guava:guava:23.0'
        ,'com.netflix.hystrix:hystrix-core:1.5.12'
        ,'commons-beanutils:commons-beanutils-core:1.8.3'
        ,'org.codehaus.groovy:groovy:2.4.12'

        ,'org.projectlombok:lombok:1.18.8'

        ,'io.jsonwebtoken:jjwt:0.9.0'
        ,'org.springframework.security:spring-security-jwt:1.0.9.RELEASE'
        ,'org.springframework.security.oauth:spring-security-oauth2:2.2.1.RELEASE'

        ,'org.hibernate:hibernate-validator:6.0.7.Final'

        ,'com.vaadin:vaadin-spring-boot-starter:13.0.8'
        ,'com.vaadin:vaadin-charts-flow:6.3.0'
        ,'com.vaadin:vaadin-board-flow:2.2.1'

        ,'org.springframework.boot:spring-boot-starter-actuator:2.1.0.RELEASE'
        ,'org.springframework.boot:spring-boot-starter-data-jpa:2.1.0.RELEASE'
        ,'org.springframework.boot:spring-boot-starter-jetty:2.1.0.RELEASE'
        ,'org.springframework.boot:spring-boot-starter-security:2.1.0.RELEASE'
        ,'org.liquibase:liquibase-core:3.6.3'
        ,'com.h2database:h2:1.4.197'
    )

    testCompile(
        'junit:junit:4.12'
        ,'org.mockito:mockito-core:2.23.0'
        ,'org.springframework.boot:spring-boot-starter-test:2.1.0.RELEASE'
    )

    dev('org.springframework.boot:spring-boot-devtools')

}

sourceCompatibility = 1.8
targetCompatibility = 1.8
String buildName = 'vaadin-troubleshooting'

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

test {
    // Trick to run tests in parallel with as much concurrency as possible.
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

    testLogging {
        showStandardStreams = true
    }
}

jar {
    baseName = buildName
}

bootRun {
    if(project.hasProperty('debugMode')) {
        jvmArgs = [ "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005" ]
    }

    classpath = sourceSets.main.runtimeClasspath + configurations.dev
}
